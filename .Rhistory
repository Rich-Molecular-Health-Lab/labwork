sep       = "\t",
quote     = FALSE,
row.names = FALSE)
path <- config::get(config = params$sampleset)
write.table(compilation.export,
paste0(path$compilation),
sep       = "\t",
quote     = FALSE,
row.names = FALSE)
write.table(libraries,
paste0(path$libraries),
sep       = "\t",
quote     = FALSE,
row.names = FALSE)
write.table(extracts.export,
paste0(path$extracts),
sep       = "\t",
quote     = FALSE,
row.names = FALSE)
write.table(samples.export,
paste0(path$samples),
sep       = "\t",
quote     = FALSE,
row.names = FALSE)
?setNames
shiny::runApp('LibraryPrep')
runApp('LibraryPrep')
?full_join
runApp('LibraryPrep')
test <- load_data(loris$compilation)
runApp('LibraryPrep')
print(loris$compilation)
samplesets <- list(
loris    = loris$compilation,
marmoset = marmoset$compilation,
bats     = bats$compilation,
isolates = isolates$compilation,
envir    = envir$compilation
)
samplesets <- list(
loris    = loris$compilation,
marmoset = marmoset$compilation,
bats     = bats$compilation,
isolates = isolates$compilation,
envir    = envir$compilation
)
modify(samplesets, ~ {
path      <- .x
tbl <- read.table(path, sep = "\t", header = TRUE) %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
samplesets <- list(
loris    = "../bioinformatics_stats/dataframes/sample_inventories/compilation_loris.tsv",
marmoset = marmoset$compilation,
bats     = bats$compilation,
isolates = isolates$compilation,
envir    = envir$compilation
)
modify(samplesets, ~ {
path      <- .x
tbl <- read.table(path, sep = "\t", header = TRUE) %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
runApp('LibraryPrep')
samplesets <- list(
loris    = "loris$compilation",
marmoset = "marmoset$compilation",
bats     = "bats$compilation",
isolates = "isolates$compilation",
envir    = "envir$compilation"
)
modify(samplesets, ~ {
path      <- .x
tbl <- read.table(path, sep = "\t", header = TRUE) %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
runApp('LibraryPrep')
samplesets <- list(
loris    = tibble(read.table(loris$compilation, sep = "\t", header = TRUE)),
marmoset = tibble(read.table(marmoset$compilation, sep = "\t", header = TRUE)),
bats     = tibble(read.table(bats$compilation, sep = "\t", header = TRUE)),
isolates = tibble(read.table(isolates$compilation, sep = "\t", header = TRUE)),
envir    = tibble(read.table(envir$compilation, sep = "\t", header = TRUE))
)
setwd("~/GitRepos/richlab_main/labwork/LibraryPrep")
samplesets <- list(
loris    = tibble(read.table(loris$compilation, sep = "\t", header = TRUE)),
marmoset = tibble(read.table(marmoset$compilation, sep = "\t", header = TRUE)),
bats     = tibble(read.table(bats$compilation, sep = "\t", header = TRUE)),
isolates = tibble(read.table(isolates$compilation, sep = "\t", header = TRUE)),
envir    = tibble(read.table(envir$compilation, sep = "\t", header = TRUE))
)
modify(samplesets, ~ {
path      <- .x
tbl <- read.table(path, sep = "\t", header = TRUE) %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
modify(samplesets, ~ {
tbl      <- .x
tbl %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
modify(samplesets, ~ {
tbl      <- .x
tbl %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
runApp()
samplesets <- list(
loris    = tibble(read.table(loris$compilation, sep = "\t", header = TRUE)),
marmoset = tibble(read.table(marmoset$compilation, sep = "\t", header = TRUE)),
bats     = tibble(read.table(bats$compilation, sep = "\t", header = TRUE)),
isolates = tibble(read.table(isolates$compilation, sep = "\t", header = TRUE)),
envir    = tibble(read.table(envir$compilation, sep = "\t", header = TRUE))
)
modify(samplesets, ~ {
tbl      <- .x
tbl %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(tbl)
})
samplesets <- list(
loris    = tibble(read.table(loris$compilation, sep = "\t", header = TRUE)),
marmoset = tibble(read.table(marmoset$compilation, sep = "\t", header = TRUE)),
bats     = tibble(read.table(bats$compilation, sep = "\t", header = TRUE)),
isolates = tibble(read.table(isolates$compilation, sep = "\t", header = TRUE)),
envir    = tibble(read.table(envir$compilation, sep = "\t", header = TRUE))
)
imodify(samplesets, ~ {
name     <- .y
tbl      <- .x
name$tbl %>%
mutate(CollectionDate = ymd(CollectionDate),
steps_remaining = factor(steps_remaining, levels = c(
"sample not extracted",
"extract not sequenced",
"sample extracted and sequenced"
))) %>%
select(
steps_remaining   ,
ExtractID         ,
Subject          ,
Subj_Certainty  ,
CollectionDate    ,
ExtractConc      ,
ExtractBox       ) %>%
arrange(steps_remaining, CollectionDate, Subject) %>% as_tibble() %>%
mutate(steps_remaining = as.character(steps_remaining))
return(name$tbl)
})
runApp()
?full_join
runApp()
part1_rap16s <- list(
list("Select enough barcodes for all extracts.",
a = "Check the number of barcodes needed using the extract summary table generated from your setup selections.",
b = "Break the set of barcodes needed away from the 96-well plate from the kit and return the rest to storage.",
c = "Select the barcodes you will be using from the table below. This will match them in order to each of your extract tubes (see table above)."),
list("Thaw the desired barcodes at room temperature."),
list("Briefly centrifuge barcodes in a microfuge to make sure the liquid is at the bottom of the tubes and place on ice."),
list("Thaw the LongAmp Hot Start Taq 2X Master Mix, spin down briefly, mix well by pipetting and place on ice."),
list("Prepare the DNA in nuclease-free water according to the values in the table below.",
a = "Transfer the 'Extract to add' volume into a 1.5 ml Eppendorf DNA LoBind tube.",
b = "Add nuclease-free water according to the volume under 'H2O to add' to reach the total volume.",
c = "Check each row as you go to keep track of progress.",
d = "Mix thoroughly by pipetting up and down, or by flicking the tube to avoid shearing.",
e = "Spin down briefly in a microfuge."),
list("Prepare the 16S PCR."),
list("Ensure the components are thoroughly mixed by pipetting and spin down briefly."),
list("Line up the barcodes with their matching reaction tube according to the table below.",
a = "Using clean pipette tips, carefully pierce the foil surface of the required barcodes.",
b = "Use a new tip for each barcode to avoid cross-contamination."),
list("Transfer 10 Î¼l of each 16S Barcode into respective sample-containing tubes.",
a = "Using a multichannel pipette, mix the 16S barcodes by pipetting up and down 10 times.",
b = "Check the boxes above as you add each barcode to its assigned tube.",
c = "Ensure the components are thoroughly mixed by pipetting the contents of the tubes 10 times and spin down. Note: Mix gently to minimise introducing air bubbles to the reactions."),
list("Place the tubes in the thermal cycler and run the PCR by selecting the program below or manually entering it.")) %>%
set_names(paste0("I.", seq_along(.), "."))
part2_rap16s <- list(
list("Prepare the supplies for sample pooling, bead clean-up, and adapter ligation according to the table below.",
a = "Thaw reagents at room temperature.",
b = "Spin down briefly using a microfuge",
c = "Mix by pipetting."),
list("Once the PCR cycles have completed, remove the tubes and add EDTA to stop the reaction.",
a = "Add 4 Âµl of EDTA to each barcoded sample.",
b = "Mix thorougly by pipetting and spin down briefly."),
list("Incubate for 5 minutes at room temperature."),
list("Quantify 1 Âµl of each barcoded sample using a Qubit fluorometer. Enter the QC results below before proceeding."),
list("Pool all barcoded samples in equimolar ratios in a 1.5 ml Eppendorf DNA LoBind tube."),
list("Resuspend the AMPure XP Beads (AXP) by vortexing."),
list("Add a 0.6X volume ratio of resuspended AMPure XP Beads to the pool of barcoded samples.",
a = "The value box below will automatically update with the proper volume for your samples.",
b = "Mix by pipetting."),
list("Incubate on a Hula mixer (rotator mixer) for 5 minutes at room temperature."),
list("Prepare 2 ml of fresh 80% ethanol in nuclease-free water."),
list("Spin down the sample and pellet on a magnet until supernatant is clear and colourless. Keep the tube on the magnet, and pipette off the supernatant."),
list("Keep the tube on the magnet and wash the beads with 1 ml of freshly prepared 80% ethanol without disturbing the pellet. Remove the ethanol using a pipette and discard."),
list("Repeat the previous step."),
list("Spin down and place the tube back on the magnet. Pipette off any residual ethanol. Allow to dry for ~30 seconds, but do not dry the pellet to the point of cracking."),
list("Remove the tube from the magnetic rack and resuspend the pellet in 15 Âµl Elution Buffer (EB). Spin down and incubate for 5 minutes at room temperature."),
list("Pellet the beads on a magnet until the eluate is clear and colourless, for at least 1 minute."),
list("Remove and retain 15 Âµl of eluate into a clean 1.5 ml Eppendorf DNA LoBind tube."),
list("Quantify 1 Âµl of eluted sample using a Qubit fluorometer. Enter the QC result for the pooled library below before proceeding."),
list("Transfer your eluted sample into a clean 1.5 ml Eppendorf DNA LoBind tube."),
list("In a fresh 1.5 ml Eppendorf DNA LoBind tube, dilute the Rapid Adapter (RA) as follows:"),
list("Add 1 Âµl of the diluted Rapid Adapter (RA) to the barcoded DNA.",
a = "Mix gently by flicking the tube.",
b = "Spin down briefly."),
list("Incubate the reaction for 5 minutes at room temperature."))%>%
set_names(paste0("II.", seq_along(.), "."))
part1_lsk <- list(
list("Thaw DNA Control Sample (DCS) at room temperature, spin down, mix by pipetting, and place on ice."),
list("Prepare the NEB reagents in accordance with manufacturerâs instructions, and place on ice.",
a = "Thaw all reagents on ice.",
b = "Flick and/or invert the reagent tubes to ensure they are well mixed. Do not vortex the FFPE DNA Repair Mix or Ultra II End Prep Enzyme Mix.",
c = "Always spin down tubes before opening for the first time each day.",
d = "Vortex the FFPE DNA Repair Buffer v2, or the NEBNext FFPE DNA Repair Buffer and Ultra II End Prep Reaction Buffer to ensure they are well mixed.",
e = "The FFPE DNA Repair Buffer may have a yellow tinge and is fine to use if yellow."),
list("Prepare the DNA in nuclease-free water according to the values in the table below.",
a = "Transfer the 'Extract to add' volume into a 1.5 ml Eppendorf DNA LoBind tube.",
b = "Add nuclease-free water according to the volume under 'H2O to add' to reach the total volume.",
c = "Check each row as you go to keep track of progress.",
d = "Mix thoroughly by pipetting up and down, or by flicking the tube.",
e = "Spin down briefly in a microfuge."),
list("In a 0.2 ml thin-walled PCR tube, prepare the reaction mix."),
list("Thoroughly mix the reaction by gently pipetting and briefly spinning down."),
list("Using a thermal cycler, incubate at 20Â°C for 5 minutes and 65Â°C for 5 minutes."),
list("Resuspend the AMPure XP Beads (AXP) by vortexing."),
list("Transfer the DNA sample to a clean 1.5 ml Eppendorf DNA LoBind tube."),
list("Add 60 Âµl of resuspended the AMPure XP Beads (AXP) to the end-prep reaction and mix by flicking the tube."),
list("Incubate on a Hula mixer (rotator mixer) for 5 minutes at room temperature."),
list("Prepare 500 Î¼l of fresh 80% ethanol in nuclease-free water."),
list("Spin down the sample and pellet on a magnet until supernatant is clear and colourless. Keep the tube on the magnet, and pipette off the supernatant."),
list("Keep the tube on the magnet and wash the beads with 200 Âµl of freshly prepared 80% ethanol without disturbing the pellet. Remove the ethanol using a pipette and discard."),
list("Repeat the previous step."),
list("Spin down and place the tube back on the magnet. Pipette off any residual ethanol. Allow to dry for ~30 seconds, but do not dry the pellet to the point of cracking."),
list("Remove the tube from the magnetic rack and resuspend the pellet in 61 Âµl nuclease-free water. Incubate for 2 minutes at room temperature."),
list("Pellet the beads on a magnet until the eluate is clear and colourless, for at least 1 minute."),
list("Remove and retain 61 Âµl of eluate into a clean 1.5 ml Eppendorf DNA LoBind tube."),
list("Quantify 1 Âµl of eluted sample using a Qubit fluorometer. Enter the QC results for each library below before proceeding.")) %>%
set_names(paste0("I.", seq_along(.), "."))
part2_lsk <- list(
list("Spin down the Ligation Adapter (LA) and Salt-T4Â® DNA Ligase, and place on ice."),
list("Thaw Ligation Buffer (LNB) at room temperature, spin down and mix by pipetting. Due to viscosity, vortexing this buffer is ineffective. Place on ice immediately after thawing and mixing."),
list("Thaw the Elution Buffer (EB) at room temperature and mix by vortexing. Then spin down and place on ice."),
list("Thaw either Long Fragment Buffer (LFB) or Short Fragment Buffer (SFB) at room temperature and mix by vortexing. Then spin down and place on ice."),
list("In a 1.5 ml Eppendorf DNA LoBind tube, prepare the reaction mix shown below."),
list("Thoroughly mix the reaction by gently pipetting and briefly spinning down."),
list("Incubate the reaction for 10 minutes at room temperature."),
list("Resuspend the AMPure XP Beads (AXP) by vortexing."),
list("Add 40 Âµl of resuspended AMPure XP Beads (AXP) to the reaction and mix by flicking the tube."),
list("Incubate on a Hula mixer (rotator mixer) for 5 minutes at room temperature."),
list("Spin down the sample and pellet on a magnet. Keep the tube on the magnet, and pipette off the supernatant when clear and colourless."),
list("Wash the beads by adding either 250 Î¼l Long Fragment Buffer (LFB) or 250 Î¼l Short Fragment Buffer (SFB). Flick the beads to resuspend, spin down, then return the tube to the magnetic rack and allow the beads to pellet. Remove the supernatant using a pipette and discard."),
list("Repeat the previous step."),
list("Spin down and place the tube back on the magnet. Pipette off any residual supernatant. Allow to dry for ~30 seconds, but do not dry the pellet to the point of cracking."),
list("Remove the tube from the magnetic rack and resuspend the pellet in 15 Âµl Elution Buffer (EB). Spin down and incubate for 10 minutes at room temperature. For high molecular weight DNA, incubating at 37Â°C can improve the recovery of long fragments."),
list("Pellet the beads on a magnet until the eluate is clear and colourless, for at least 1 minute."),
list("Remove and retain 15 Âµl of eluate containing the DNA library into a clean 1.5 ml Eppendorf DNA LoBind tube. Dispose of the pelleted beads"),
list("Quantify 1 Âµl of eluted sample using a Qubit fluorometer. Enter the QC results for each library below before proceeding."),
list("Prepare your final library in 12 Âµl of Elution Buffer (EB) according to the table below.")) %>%
set_names(paste0("II.", seq_along(.), "."))
part3 <- list(
list("Thaw the Sequencing Buffer (SB), Library Beads (LIB) or Library Solution (LIS, if using), Flow Cell Tether (FCT) and Flow Cell Flush (FCF) at room temperature before mixing by vortexing. Then spin down and store on ice."),
list("To prepare the flow cell priming mix with BSA, combine Flow Cell Flush (FCF) and Flow Cell Tether (FCT), as directed below. Mix by pipetting at room temperature."),
list("Open the MinION or GridION device lid and slide the flow cell under the clip. Press down firmly on the flow cell to ensure correct thermal and electrical contact."),
list("Slide the flow cell priming port cover clockwise to open the priming port."),
list("After opening the priming port, check for a small air bubble under the cover. Draw back a small volume to remove any bubbles.",
a = "Set a P1000 pipette to 200 Âµl",
b = "Insert the tip into the priming port",
c = "Turn the wheel until the dial shows 220-230 Âµl, to draw back 20-30 Âµl, or until you can see a small volume of buffer entering the pipette tip"),
list("Load 800 Âµl of the priming mix into the flow cell via the priming port, avoiding the introduction of air bubbles. Wait for five minutes. During this time, prepare the library for loading by following the steps below."),
list("Thoroughly mix the contents of the Library Beads (LIB) by pipetting."),
list("In a new 1.5 ml Eppendorf DNA LoBind tube, prepare the flow cell reaction mix."),
list("Complete the flow cell priming.",
a = "Gently lift the SpotON sample port cover to make the SpotON sample port accessible.",
b = "Load 200 Âµl of the priming mix into the flow cell priming port (not the SpotON sample port), avoiding the introduction of air bubbles."),
list("Mix the prepared library gently by pipetting up and down just prior to loading."),
list("Add 75 Î¼l of the prepared library to the flow cell via the SpotON sample port in a dropwise fashion. Ensure each drop flows into the port before adding the next."),
list("Gently replace the SpotON sample port cover, making sure the bung enters the SpotON port and close the priming port."),
list("Place the light shield onto the flow cell.",
a = "Carefully place the leading edge of the light shield against the clip. Note: Do not force the light shield underneath the clip.",
b = "Gently lower the light shield onto the flow cell. The light shield should sit around the SpotON cover, covering the entire top section of the flow cell.")) %>%
set_names(paste0("III.", seq_along(.), "."))
part1_rap16s.recs <- accordion_panel(
"Recommendations",
card(class = "bg-warning",
card_header("Minimum DNA Input Amount"),
card_body("For optimal output, you will need 10 ng high molecular weight genomic DNA per barcode.")),
card(class = "bg-warning",
card_header("Minimum 16S Barcode Primers use requirements"),
card_body("For optimal output, ONT does not recommend using fewer than 4 barcodes. If you wish to multiplex less than 4 samples, please ensure you split your sample(s) across barcodes so a minimum of 4 barcodes are run.")),
card(class = "bg-warning",
card_header("DO NOT DAMAGE THE THERMAL CYCLER"),
card_body("Please ask for help if you have not used the thermal cycler before.",
tags$ul(
tags$li("You want to be sure all tube lids are properly closed. If they are not, you may waste an entire reaction due to evaporation of reagents."),
tags$li("Be sure the thermal cycler lid latches securely, but DO NOT force the lid if you are struggling. This could damage or destroy the equipment.")))))
part1_lsk.recs <- accordion_panel(
"Recommendations",
card(class = "bg-info",
card_header("ONT's QC Recommendation"),
card_body(tags$ul(
tags$li("Samples with a wide distribution of fragment sizes, e.g. gDNA: Start with 1 Î¼g of material for the Ligation Sequencing Kit, or 400 ng of material for the Rapid Sequencing Kit."),
tags$li("Short fragment libraries, e.g. amplicons or cDNA: Start with 100-200 fmol."),
tags$li("Some kits which have a PCR step included as part of the protocol can be used with lower DNA inputs: Refer to individual library prep protocols for details.")))),
card(class = "bg-info",
card_header("Tip from ONT"),
card_body("ONT recommends using the NEBNextÂ® Companion Module v2 for Oxford Nanopore TechnologiesÂ® Ligation Sequencing (E7672S/E7672L), which contains all the NEB reagents needed for use with the Ligation Sequencing Kit."),
card_footer("The previous version, NEBNextÂ® Companion Module for Oxford Nanopore TechnologiesÂ® Ligation Sequencing (NEB, E7180S/E7180L) is also compatible, but the recommended v2 module offers more efficient dA-tailing and ligation.")),
card(class = "bg-info",
card_header("Tip from ONT"),
card_body("ONT recommends using the DNA Control Sample (DCS) in your library prep for troubleshooting purposes."),
card_footer("You can also omit this step and make up the extra 1 Âµl with your sample DNA, if preferred.")))
part2_lsk.recs <- accordion_panel(
"Recommendations",
card(class = "bg-info",
card_header("Tip from ONT"),
card_body("ONT recommends using the  the Salt-T4Â® DNA Ligase (NEB, M0467)"),
card_footer("Salt-T4Â® DNA Ligase (NEB, M0467) can be bought separately or is provided in the NEBNextÂ® Companion Module v2 for Oxford Nanopore TechnologiesÂ® Ligation Sequencing (E7672S/E7672L).", br(), "The Quick T4 DNA Ligase (NEB, E6057) available in the previous version NEBNextÂ® Companion Module for Oxford Nanopore TechnologiesÂ® Ligation Sequencing (NEB, E7180S/E7180L) is also compatible, but the new recommended reagent offers more efficient and ligation.")),
card(class = "bg-warning",
card_header("IMPORTANT"),
card_body("Although third-party ligase products may be supplied with their own buffer, the ligation efficiency of the Ligation Adapter (LA) is higher when using the Ligation Buffer (LNB) supplied in the Ligation Sequencing Kit.")),
card(class = "bg-warning",
card_header("IMPORTANT"),
card_body("Depending on the wash buffer (LFB or SFB) used, the clean-up step after adapter ligation is designed to either enrich for DNA fragments of >3 kb, or purify all fragments equally."),
card_footer(
tags$ul(
tags$li("To enrich for DNA fragments of 3 kb or longer, use Long Fragment Buffer (LFB)"),
tags$li("To retain DNA fragments of all sizes, use Short Fragment Buffer (SFB)")))))
part3.recs <- accordion_panel(
"Recommendations",
card(class = "bg-warning",
card_header("IMPORTANT"),
card_body("Please note, this kit is only compatible with R10.4.1 flow cells (FLO-MIN114).")),
card(class = "bg-warning",
card_header("IMPORTANT"),
card_body("For optimal sequencing performance and improved output on MinION R10.4.1 flow cells (FLO-MIN114), ONT recommends adding Bovine Serum Albumin (BSA) to the flow cell priming mix at a final concentration of 0.2 mg/ml."),
card_footer("ONT does not recommend using any other albumin type (e.g. recombinant human serum albumin)."))
)
steps <- list(
rapid16s = c(part1_rap16s, part2_rap16s, part3),
lsk      = c(part1_lsk, part2_lsk, part3)
)
View(steps)
test <- keep_at(steps, "rapid16s") %>% list_flatten()
View(test)
test <- keep_at(steps, "rapid16s") %>% list_flatten(name_spec = "{inner}")
View(test)
runApp()
shiny::runApp()
shiny::runApp('LibraryPrep')
runApp('LibraryPrep')
View(e)
runApp('LibraryPrep')
?accordion
runApp('LibraryPrep')
View(e)
barcodes <- list(
rapid16s = tibble(
"column"     = c(1:12),
"row_A"      = rep(c("01", "09", "17", "blank"), times = 3),
"row_B"      = rep(c("02", "10", "18", "blank"), times = 3),
"row_C"      = rep(c("03", "11", "19", "blank"), times = 3),
"row_D"      = rep(c("04", "12", "20", "blank"), times = 3),
"row_E"      = rep(c("05", "13", "21", "blank"), times = 3),
"row_F"      = rep(c("06", "14", "22", "blank"), times = 3),
"row_G"      = rep(c("07", "15", "23", "blank"), times = 3),
"row_H"      = rep(c("08", "16", "24", "blank"), times = 3),
),
lsk = tibble(
"column" = c("None"),
"row_A" = c("None"),
"row_B" = c("None"),
"row_C" = c("None"),
"row_D" = c("None"),
"row_E" = c("None"),
"row_F" = c("None"),
"row_G" = c("None"),
"row_H" = c("None")
)
View(barcodes)
barcode_tbl <- keep_at(barcodes, "rapid16s") %>% unlist()
barcode_tbl <- keep_at(barcodes, "rapid16s") %>% list_flatten()
View(barcode_tbl)
barcode_tbl <- keep_at(barcodes, "rapid16s") %>% list_simplify()
barcode_tbl <- pluck(barcodes, 2, "rapid16s")
barcode_tbl <- pluck(barcodes, 1, "rapid16s")
barcode_tbl <- pluck(barcodes, 1)
View(barcode_tbl)
barcode_tbl <- keep_at(barcodes, "rapid16s") %>% pluck(1)
View(barcode_tbl)
runApp('LibraryPrep')
View(e)
body(e[["object"]])
e[["call"]]
attributes(e)[["stack.trace"]]
e[["message"]]
e
?accordion
runApp('LibraryPrep')
