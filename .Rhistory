Title != "NEBNext® Companion Module v2" &
Title != "T7 Endonuclease I" &
Title != "Blunt/TA Ligase" &
Title != "MinION" &
Title != "DNA/RNA Shield Lysis Tubes (Microbe)" &
Title != "2mL Collection Tubes"
) %>%
mutate(Samples = 60) %>%
project_total("Pygmy Loris Taxonomy/Phylogenetics")
loris_microbiomes <- consumables_table %>%
filter(Title != "Ligation Sequencing Kit" &
Title != "Rapid Barcoding Kit 24"    &
Title != "NEBNext® Companion Module v2" &
Title != "REPLI-g UltraFast Mini Kit" &
Title != "T7 Endonuclease I" &
Title != "Blunt/TA Ligase" &
Title != "MinION" &
Title != "DNA/RNA Shield Lysis Tubes (Microbe)" &
Title != "2mL Collection Tubes"
) %>%
mutate(Samples = 400) %>%
project_total("Pygmy Loris Gut Microbiomes")
budget_summary <- bind_rows(
loris_microbiomes,
loris_taxonomy,
salci,
bat_microbiome,
bat_eDNA,
equipment,
personnel) %>%
relocate(all_of(budget_cols))
budget_subtables <- budget_summary %>%
group_by(Category, Project, Supplies) %>%
group_split() %>%
set_names(map_chr(., ~ paste(unique(.x$Category),
unique(.x$Project),
unique(.x$Supplies),
sep = " - ")))
View(budget_subtables)
category_budgets <- budget_summary %>%
group_by(Category) %>%
group_split() %>%
set_names(map_chr(., ~ paste(unique(.x$Category),
sep = " - ")))
project_budgets <- budget_summary %>%
group_by(Category, Project) %>%
group_split() %>%
set_names(map_chr(., ~ paste(unique(.x$Category),
unique(.x$Project),
sep = " - ")))
project_supplies_budgets <- budget_summary %>%
group_by(Category, Project, Supplies) %>%
group_split() %>%
set_names(map_chr(., ~ paste(unique(.x$Category),
unique(.x$Project),
unique(.x$Supplies),
sep = " - ")))
View(category_budgets)
cat_summary <- tibble(
Category  = names(category_budgets),
TotalCost = map_dbl(category_budgets, ~ sum(.x$Cost_total, na.rm = TRUE))
)
View(cat_summary)
reactable(
cat_summary,
columns = list(
Category   = colDef(name = "Category"),
TotalCost  = colDef(
name   = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE)
)
),
details = function(cat_index) {
# Get the Category for this row
cat_val <- cat_summary$Category[cat_index]
# Subset project_budgets to those for this category
projects <- project_budgets %>%
keep(~ unique(.x$Category) == cat_val)
# Create a project summary tibble
if (length(projects) == 0) return(NULL)
proj_summary <- tibble(
Project = map_chr(projects, ~ unique(.x$Project)),
TotalCost = map_dbl(projects, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Projects
reactable(
proj_summary,
columns = list(
Project = colDef(name = "Project"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE)
)
),
details = function(proj_index) {
# Get the project for this row
proj_val <- proj_summary$Project[proj_index]
# Subset project_supplies_budgets to those for this Category and Project
supplies <- project_supplies_budgets %>%
keep(~ unique(.x$Category) == cat_val & unique(.x$Project) == proj_val)
if (length(supplies) == 0) return(NULL)
supp_summary <- tibble(
Supplies = map_chr(supplies, ~ unique(.x$Supplies)),
TotalCost = map_dbl(supplies, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Supplies
reactable(
supp_summary,
columns = list(
Supplies = colDef(name = "Supplies"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE)
)
}
)
}
)
budget.react <- reactable(
cat_summary,
columns = list(
Category   = colDef(name = "Category"),
TotalCost  = colDef(
name   = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE)
)
),
details = function(cat_index) {
# Get the Category for this row
cat_val <- cat_summary$Category[cat_index]
# Subset project_budgets to those for this category
projects <- project_budgets %>%
keep(~ unique(.x$Category) == cat_val)
# Create a project summary tibble
if (length(projects) == 0) return(NULL)
proj_summary <- tibble(
Project = map_chr(projects, ~ unique(.x$Project)),
TotalCost = map_dbl(projects, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Projects
reactable(
proj_summary,
columns = list(
Project = colDef(name = "Project"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE)
)
),
details = function(proj_index) {
# Get the project for this row
proj_val <- proj_summary$Project[proj_index]
# Subset project_supplies_budgets to those for this Category and Project
supplies <- project_supplies_budgets %>%
keep(~ unique(.x$Category) == cat_val & unique(.x$Project) == proj_val)
if (length(supplies) == 0) return(NULL)
supp_summary <- tibble(
Supplies = map_chr(supplies, ~ unique(.x$Supplies)),
TotalCost = map_dbl(supplies, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Supplies
reactable(
supp_summary,
columns = list(
Supplies = colDef(name = "Supplies"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE)
)
}
)
}
)
budget.react
budget.react <- reactable(
cat_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Category   = colDef(name = "Category"),
TotalCost  = colDef(
name   = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(cat_index) {
# Get the Category for this row
cat_val <- cat_summary$Category[cat_index]
# Subset project_budgets to those for this category
projects <- project_budgets %>%
keep(~ unique(.x$Category) == cat_val)
# Create a project summary tibble
if (length(projects) == 0) return(NULL)
proj_summary <- tibble(
Project = map_chr(projects, ~ unique(.x$Project)),
TotalCost = map_dbl(projects, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Projects
reactable(
proj_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
columns = list(
Project   = colDef(name = "Project"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(proj_index) {
# Get the project for this row
proj_val <- proj_summary$Project[proj_index]
# Subset project_supplies_budgets to those for this Category and Project
supplies <- project_supplies_budgets %>%
keep(~ unique(.x$Category) == cat_val & unique(.x$Project) == proj_val)
if (length(supplies) == 0) return(NULL)
supp_summary <- tibble(
Supplies = map_chr(supplies, ~ unique(.x$Supplies)),
TotalCost = map_dbl(supplies, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Supplies
reactable(
supp_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
columns = list(
Supplies  = colDef(name = "Supplies"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
}
)
}
)
budget.react
budget.react <- reactable(
cat_summary,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Category   = colDef(name = "Category",
footer    = "Total"),
TotalCost  = colDef(
name   = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(cat_index) {
# Get the Category for this row
cat_val <- cat_summary$Category[cat_index]
# Subset project_budgets to those for this category
projects <- project_budgets %>%
keep(~ unique(.x$Category) == cat_val)
# Create a project summary tibble
if (length(projects) == 0) return(NULL)
proj_summary <- tibble(
Project = map_chr(projects, ~ unique(.x$Project)),
TotalCost = map_dbl(projects, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Projects
reactable(
proj_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Project   = colDef(name = "Project",
footer    = "Subtotal"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(proj_index) {
# Get the project for this row
proj_val <- proj_summary$Project[proj_index]
# Subset project_supplies_budgets to those for this Category and Project
supplies <- project_supplies_budgets %>%
keep(~ unique(.x$Category) == cat_val & unique(.x$Project) == proj_val)
if (length(supplies) == 0) return(NULL)
supp_summary <- tibble(
Supplies = map_chr(supplies, ~ unique(.x$Supplies)),
TotalCost = map_dbl(supplies, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Supplies
reactable(
supp_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
defaultExpanded = FALSE,
columns = list(
Supplies  = colDef(name = "Supplies",
footer    = "Subtotal"),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
}
)
}
)
budget.react
budget.react <- reactable(
cat_summary,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Category   = colDef(name = "Category",
footer    = "Total"),
TotalCost  = colDef(
name   = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(cat_index) {
# Get the Category for this row
cat_val <- cat_summary$Category[cat_index]
# Subset project_budgets to those for this category
projects <- project_budgets %>%
keep(~ unique(.x$Category) == cat_val)
# Create a project summary tibble
if (length(projects) == 0) return(NULL)
proj_summary <- tibble(
Project = map_chr(projects, ~ unique(.x$Project)),
TotalCost = map_dbl(projects, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Projects
reactable(
proj_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Project   = colDef(name = "Project",
footer    = function(values, name) {
paste0(values, " Subtotal:")
}
),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(proj_index) {
# Get the project for this row
proj_val <- proj_summary$Project[proj_index]
# Subset project_supplies_budgets to those for this Category and Project
supplies <- project_supplies_budgets %>%
keep(~ unique(.x$Category) == cat_val & unique(.x$Project) == proj_val)
if (length(supplies) == 0) return(NULL)
supp_summary <- tibble(
Supplies = map_chr(supplies, ~ unique(.x$Supplies)),
TotalCost = map_dbl(supplies, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Supplies
reactable(
supp_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
defaultExpanded = FALSE,
columns = list(
Supplies  = colDef(name = "Supplies",
footer    = function(values, name) {
paste0(values, " Subtotal:")
}
),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
}
)
}
)
budget.react <- reactable(
cat_summary,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Category   = colDef(name = "Category",
footer    = "Total"),
TotalCost  = colDef(
name   = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(cat_index) {
# Get the Category for this row
cat_val <- cat_summary$Category[cat_index]
# Subset project_budgets to those for this category
projects <- project_budgets %>%
keep(~ unique(.x$Category) == cat_val)
# Create a project summary tibble
if (length(projects) == 0) return(NULL)
proj_summary <- tibble(
Project = map_chr(projects, ~ unique(.x$Project)),
TotalCost = map_dbl(projects, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Projects
reactable(
proj_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultExpanded = FALSE,
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
columns = list(
Project   = colDef(name = "Project",
footer    = function(value, name) {
paste0(value, " Subtotal:")
}
),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
),
details = function(proj_index) {
# Get the project for this row
proj_val <- proj_summary$Project[proj_index]
# Subset project_supplies_budgets to those for this Category and Project
supplies <- project_supplies_budgets %>%
keep(~ unique(.x$Category) == cat_val & unique(.x$Project) == proj_val)
if (length(supplies) == 0) return(NULL)
supp_summary <- tibble(
Supplies = map_chr(supplies, ~ unique(.x$Supplies)),
TotalCost = map_dbl(supplies, ~ sum(.x$Cost_total, na.rm = TRUE))
)
# Return a nested reactable for Supplies
reactable(
supp_summary,
height          = 800,
theme           = fivethirtyeight(),
defaultColDef   = colDef(footerStyle = list(fontWeight = "bold")),
defaultExpanded = FALSE,
columns = list(
Supplies  = colDef(name = "Supplies",
footer    = function(value, name) {
paste0(value, " Subtotal:")
}
),
TotalCost = colDef(
name = "Total Cost",
format = colFormat(currency = "USD", separators = TRUE),
footer    = function(values, name) {
total <- sum(values, na.rm = TRUE)
label_currency(prefix = "$", big.mark = ",")(total)
}
)
}
)
}
)
cat_summary <- tibble(
Category  = names(category_budgets),
TotalCost = map_dbl(category_budgets, ~ sum(.x$Cost_total, na.rm = TRUE))
)
