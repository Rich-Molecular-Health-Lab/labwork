shiny::runApp('LibraryPrep')
dummy.compilation <- tibble(
ExtractID       = str_c("TEST", seq(1, 50)),
Subject         = sample(c(str_c("TEST", seq(1, 5))), size = 50, replace = TRUE),
Subj_Certainty  = sample(c("yes", "no", "unknown"), size = 50, replace = TRUE),
CollectionDate  = sample(seq(ymd("2023-01-01"), ymd("2023-12-31"), by = "day"), size = 50, replace = TRUE),
ExtractConc     = runif(50, min = 10, max = 100),
steps_remaining = sample(c("sample not extracted", "extract not sequenced", "sample extracted and sequenced"),
size = 50, replace = TRUE) %>%
factor(levels = c("sample not extracted", "extract not sequenced", "sample extracted and sequenced")),
ExtractBox      = str_c("Box_", sample(1:10, size = 50, replace = TRUE))
)
View(dummy.compilation)
bats          <- config::get(config = "bats")
isolates      <- config::get(config = "isolates")
envir         <- config::get(config = "envir")
write.table(compilation,
bats$compilation,
row.names = F,
sep = "\t")
bats          <- config::get(config = "bats")
isolates      <- config::get(config = "isolates")
envir         <- config::get(config = "envir")
write.table(dummy.compilation,
bats$compilation,
row.names = F,
sep = "\t")
library(knitr)
library(bookdown)
library(bsicons)
library(bslib)
library(conflicted)
library(devtools)
library(fontawesome)
library(glue)
library(ggtext)
library(gt)
library(gtExtras)
library(gtable)
library(htmltools)
library(kableExtra)
library(MASS)
library(paletteer)
library(pander)
library(pandoc)
library(png)
library(rcompanion)
library(reactable)
library(rmarkdown)
library(sass)
library(scales)
library(shinydashboard)
library(shinyjs)
library(shinyMatrix)
library(shinyTime)
library(showtext)
library(tidyverse)
library(usethis)
library(utf8)
library(rmdformats)
global            <- config::get(config = "default")
path              <- config::get(config = "libprep")
loris             <- config::get(config = "loris")
bats              <- config::get(config = "bats")
marmoset          <- config::get(config = "marmoset")
isolates          <- config::get(config = "isolates")
envir             <- config::get(config = "envir")
sample_sheets     <- config::get(config = "sample_sheets")
barcode_alignments<- config::get(config = "barcode_alignments")
methods_16s       <- config::get(config = "methods_16s")
dummy.compilation <- tibble(
ExtractID       = str_c("TEST", seq(1, 50)),
Subject         = sample(c(str_c("TEST", seq(1, 5))), size = 50, replace = TRUE),
Subj_Certainty  = sample(c("yes", "no", "unknown"), size = 50, replace = TRUE),
CollectionDate  = sample(seq(ymd("2023-01-01"), ymd("2023-12-31"), by = "day"), size = 50, replace = TRUE),
ExtractConc     = runif(50, min = 10, max = 100),
steps_remaining = sample(c("sample not extracted", "extract not sequenced", "sample extracted and sequenced"),
size = 50, replace = TRUE) %>%
factor(levels = c("sample not extracted", "extract not sequenced", "sample extracted and sequenced")),
ExtractBox      = str_c("Box_", sample(1:10, size = 50, replace = TRUE))
)
write.table(dummy.compilation,
bats$compilation,
row.names = F,
sep = "\t")
get(wd())
getwd()
bats          <- config::get(config = "bats")
isolates      <- config::get(config = "isolates")
envir         <- config::get(config = "envir")
write.table(dummy.compilation,
bats$compilation,
row.names = F,
sep = "\t")
write.table(dummy.compilation,
isolates$compilation,
row.names = F,
sep = "\t")
write.table(dummy.compilation,
envir$compilation,
row.names = F,
sep = "\t")
make_total <- function(df) {
df %>% group_by(Title) %>%
summarize(Cost_month = Each * N_month,
Cost_year  = 12 * (Each * N_month)) %>%
ungroup()
return(df)
}
lab.manager <- tibble(
Category = "Personnel",
Title    = "Lab Technican",
Each     = 15,
Per      = "hour",
N_month  = 80
) %>% make_total()
global             <- config::get(config = "default")
here::i_am("supplies/Budget.Rmd")
